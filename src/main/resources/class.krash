// Abstract classes cannot be instantiated themselves
abstract class Object(id_object) {

    fun printID() {
        echo(id_object)
    }

}

// Open classes can be extended by other classes
open class Person(id_person, name_person): Object(id_person) {

    fun hello() {
        echo("Hello $name_person")
    }

}

// Final classes cannot be extended
class Developer(id_developer, name_developer, lang_developer): Person(id_developer, name_developer) {

    fun toMap() {
        return {id: id_developer, name: name_developer, lang: lang_developer}
    }

}

// Create Instance
//person = Person(0, "James")
//echo(person)
//person.hello()
//person.printID()
// NOTE: this super method doesn't work

// Create Instance
dev = Developer(0, "James", ["Kotlin", "Python"])
// WARN: this call DOES work if the previous block has been executed (id_person exists)
echo(dev)
echo(dev.toMap())
//dev.hello()
// WARN: this call DOES work if the previous block has been executed... this would suggest that values are leaking through scopes :(
//dev.printID()

// NOTE: with regards to warnings above, it is necessary to check ALL values assigned inside the KrashValueClass logic
//       there are likely to be things that should exist only in the KrsahValueObject logic (else leaking will occur!)